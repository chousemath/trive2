// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function calculateDistance(latitude1, longitude1, latitude2, longitude2, unit) {
  var radianLatitude1 = Math.PI * latitude1 / 180.0;
  var radianLatitude2 = Math.PI * latitude2 / 180.0;
  var radianTheta = Math.PI * (longitude1 - longitude2) / 180.0;
  var distance = Math.sin(radianLatitude1) * Math.sin(radianLatitude2) + Math.cos(radianLatitude1) * Math.cos(radianLatitude2) * Math.cos(radianTheta);
  var distance2 = Math.acos(distance) * (180.0 / Math.PI) * 60.0 * 1.1515;
  var multiplier;
  switch (unit) {
    case "K" : 
        multiplier = 1.609344;
        break;
    case "N" : 
        multiplier = 0.8684;
        break;
    default:
      multiplier = 1.0;
  }
  return distance2 * multiplier;
}

function greaterBid(b1, b2) {
  var match = Caml_obj.caml_greaterthan(b1.amount, b2.amount);
  if (match) {
    return b1;
  } else {
    return b2;
  }
}

function lesserBid(b1, b2) {
  var match = Caml_obj.caml_lessthan(b1.amount, b2.amount);
  if (match) {
    return b1;
  } else {
    return b2;
  }
}

function maxBid(bids) {
  return $$Array.fold_left(greaterBid, Caml_array.caml_array_get(bids, 0), bids);
}

function minBid(bids) {
  return $$Array.fold_left(lesserBid, Caml_array.caml_array_get(bids, 0), bids);
}

exports.calculateDistance = calculateDistance;
exports.greaterBid = greaterBid;
exports.lesserBid = lesserBid;
exports.maxBid = maxBid;
exports.minBid = minBid;
/* No side effect */
